#!/usr/bin/env bash
set -euo pipefail
shopt -s nullglob

if [[ ! "$STRATEGY" =~ merge|rebase|squash ]]; then
  echo "Invalid strategy: must be merge, rebase, or squash" >&2
  exit 64
fi

: "${DRY_RUN:=0}"

: "${GH_ACTOR:=""}"
: "${GH_EVENT:=""}"
: "${GH_PR_ACTION:=""}"
: "${GH_PR_NUMBER:=""}"
: "${GH_PR_TITLE:=""}"
: "${GH_PR_HEAD_REF:=""}"

is_dependabot() {
  [[ "$GH_ACTOR" == 'dependabot[bot]' ]] && [[ "$GH_EVENT" == 'pull_request' ]]
}

exclude_by_title() {
  [[ -n "$EXCLUDE_TITLE_REGEX" ]] && [[ "$1" =~ $EXCLUDE_TITLE_REGEX ]]
}

is_workflows_update() {
  [[ "$1" =~ ^dependabot/github_actions/.* ]]
}

gh_pr() {
  gh pr --repo "$GH_REPO" "$@"
}

tmp=$(mktemp -d)
trap 'rm -rf "$tmp"' EXIT

if is_dependabot && ! exclude_by_title "$GH_PR_TITLE" && ! is_workflows_update "$GH_PR_HEAD_REF"; then
  if ((QUARANTINE_DAYS <= 0)); then
    when_message="the next time it runs"
  else
    now_s=$(date +"%s")
    until_s=$((now_s + (QUARANTINE_DAYS * 24 * 60 * 60)))
    until=$(date -d "@$until_s" +"%Y-%m-%d")
    when_message="after $QUARANTINE_DAYS day(s), on $until"
  fi

  case "$GH_PR_ACTION" in
    opened)
      if [[ "$REMOVE_REVIEWERS" == 'true' ]]; then
        read -r users_json < <(gh api "repos/$GH_REPO/pulls/$GH_PR_NUMBER/requested_reviewers" | jq '[.users[].login]' -c)
        read -r teams_json < <(gh api "repos/$GH_REPO/pulls/$GH_PR_NUMBER/requested_reviewers" | jq '[.teams[].name]' -c)

        if [[ "$users_json" != '[]' ]] || [[ "$teams_json" != '[]' ]]; then
          echo "Removing requested reviewers"
          echo "{\"reviewers\":$users_json,\"team_reviewers\":$teams_json}" |
            gh api -X DELETE --input - "repos/$GH_REPO/pulls/$GH_PR_NUMBER/requested_reviewers"
        fi
      fi

      gh pr comment "$GH_PR_NUMBER" --body-file - <<EOM
:heavy_check_mark: If all status checks pass, and no other reviews are submitted, [mergeabot][] will merge this PR $when_message.

As long as that's OK, no other action is necessary.

[mergeabot]: https://github.com/freckle/mergeabot-action
EOM
      ;;
  esac

  exit 0
fi

now_s=$(date +"%s")
since_s=$((now_s - (QUARANTINE_DAYS * 24 * 60 * 60)))
since=$(date -d "@$since_s" +"%Y-%m-%d")

search="author:app/dependabot updated:<$since"
fields='number,title,headRefName,author,createdAt,reviewDecision'

gh_pr list --search "$search" --limit 1000 --json "$fields" --jq '.[]' |
  while IFS=$'\n' read -r ln; do
    number=$(jq --raw-output '.number' <<<"$ln")
    echo "$ln" >"$tmp/$number.json"
  done

found=0

for json in "$tmp"/*.json; do
  number=$(jq --raw-output '.number' "$json")
  title=$(jq --raw-output '.title' "$json")
  branch=$(jq --raw-output '.headRefName' "$json")
  createdAt=$(jq --raw-output '.createdAt' "$json")
  reviewDecision=$(jq --raw-output '.reviewDecision' "$json")
  found=1

  printf '%s (#\e[34m%s\e[0m)\n' "$title" "$number"
  printf '  Created at: \e[35m%s\e[0m\n' "$createdAt"
  printf '  Current review decision: \e[35m%s\e[0m\n' "$reviewDecision"

  if exclude_by_title "$title"; then
    printf '  \e[1;37m=>\e[0m \e[33mSkip\e[0m (title matches exclude-title-regex)\n'
    continue
  fi

  if is_workflows_update "$branch"; then
    printf '  \e[1;37m=>\e[0m \e[33mSkip\e[0m (PR updates worflows)\n'
    continue
  fi

  case "$reviewDecision" in
    CHANGES_REQUESTED)
      printf '  \e[1;37m=>\e[0m \e[33mSkip\e[0m (changes requested)\n'
      ;;
    APPROVED)
      printf '  \e[1;37m=>\e[0m \e[32mEnable auto-merge\e[0m\n'
      if ((!DRY_RUN)); then
        gh_pr merge --auto "$number" --"$STRATEGY"
      fi
      ;;
    *)
      printf '  \e[1;37m=>\e[0m \e[32mApprove and enable auto-merge\e[0m\n'
      if ((!DRY_RUN)); then
        gh_pr review --approve "$number"
        gh_pr merge --auto "$number" --"$STRATEGY"
      fi
      ;;
  esac
done

if ((!found)); then
  echo "No Dependabot PRs found older than $since."
fi
